import { RenderedNodeType, } from '../types';
import { __hubSpotComponentRegistry } from '../../../__synced__/remoteComponents.synced';
/**
 * Checks if the element matches the matcher.
 *
 * @param element The element to check.
 * @param matcher An optional matcher to filter the elements.
 * @returns `true` if the element matches the matcher, `false` otherwise.
 */
export const checkElementMatches = (element, matcher) => {
    // If no matcher is provided, the element matches
    if (!matcher) {
        return true;
    }
    // Check if the matcher is a predicate function
    if (typeof matcher === 'function') {
        return matcher(element);
    }
    // Check if all the props in the matcher match the props in the element
    return Object.keys(matcher).every((key) => element.props[key] === matcher[key]);
};
/**
 * Checks if the node matches the component and matcher.
 *
 * @param node The node to check.
 * @param component The component to check.
 * @param matcher An optional matcher to filter the elements.
 * @returns Whether the node matches the component and matcher.
 */
export const isMatch = (node, component, matcher) => {
    if (node == null) {
        return false;
    }
    if (node.nodeType !== RenderedNodeType.Element) {
        return false;
    }
    const targetComponentName = __hubSpotComponentRegistry.getComponentName(component);
    if (node.name !== targetComponentName) {
        return false;
    }
    return checkElementMatches(node, matcher);
};
