import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { describe, expect, it } from 'vitest';
import { Alert, Button, ButtonRow, Text } from '../../../index';
import { render } from '../index';
describe('maybeFind()', () => {
    it('should return the element when found', () => {
        const { maybeFind } = render(_jsxs(_Fragment, { children: [_jsx(ButtonRow, { children: _jsx(Button, { variant: "primary", children: "Button 1" }) }), _jsx(Alert, { title: "My Alert" })] }));
        const button = maybeFind(Button);
        expect(button).toBeDefined();
        expect(button?.props).toEqual({ variant: 'primary' });
    });
    it('should return null when element is not found', () => {
        const { maybeFind } = render(_jsxs(_Fragment, { children: [_jsx(ButtonRow, { children: _jsx(Button, { variant: "primary", children: "Button 1" }) }), _jsx(Alert, { title: "My Alert" })] }));
        const text = maybeFind(Text);
        expect(text).toBeNull();
    });
    it('should return the first matching element when multiple elements match', () => {
        const { maybeFind } = render(_jsxs(_Fragment, { children: [_jsx(Alert, { title: "First Alert" }), _jsx(Alert, { title: "Second Alert" }), _jsx(Alert, { title: "Third Alert" })] }));
        const alert = maybeFind(Alert);
        expect(alert).toBeDefined();
        expect(alert?.props).toMatchObject({ title: 'First Alert' });
    });
    it('should support matcher function', () => {
        const { maybeFind } = render(_jsx(_Fragment, { children: _jsxs(ButtonRow, { children: [_jsx(Button, { variant: "secondary", children: "Button 1" }), _jsx(Button, { variant: "primary", children: "Button 2" })] }) }));
        const primaryButton = maybeFind(Button, (node) => node.props.variant === 'primary');
        expect(primaryButton).toBeDefined();
        expect(primaryButton?.props).toMatchObject({ variant: 'primary' });
    });
    it('should return null when matcher function does not match any elements', () => {
        const { maybeFind } = render(_jsx(_Fragment, { children: _jsxs(ButtonRow, { children: [_jsx(Button, { variant: "secondary", children: "Button 1" }), _jsx(Button, { variant: "secondary", children: "Button 2" })] }) }));
        const primaryButton = maybeFind(Button, (node) => node.props.variant === 'primary');
        expect(primaryButton).toBeNull();
    });
    it('should support matcher object', () => {
        const { maybeFind } = render(_jsx(_Fragment, { children: _jsxs(ButtonRow, { children: [_jsx(Button, { variant: "secondary", children: "Button 1" }), _jsx(Button, { variant: "primary", children: "Button 2" })] }) }));
        const primaryButton = maybeFind(Button, { variant: 'primary' });
        expect(primaryButton).toBeDefined();
        expect(primaryButton?.props).toMatchObject({ variant: 'primary' });
    });
    it('should return null when matcher object does not match any elements', () => {
        const { maybeFind } = render(_jsx(_Fragment, { children: _jsxs(ButtonRow, { children: [_jsx(Button, { variant: "secondary", children: "Button 1" }), _jsx(Button, { variant: "secondary", children: "Button 2" })] }) }));
        const primaryButton = maybeFind(Button, { variant: 'primary' });
        expect(primaryButton).toBeNull();
    });
    it('should work on nested element nodes', () => {
        const { find } = render(_jsx(_Fragment, { children: _jsx(ButtonRow, { children: _jsx(Button, { variant: "primary", children: "Button 1" }) }) }));
        const buttonRow = find(ButtonRow);
        const nestedButton = buttonRow.maybeFind(Button);
        expect(nestedButton).toBeDefined();
        expect(nestedButton?.props).toMatchObject({ variant: 'primary' });
    });
    it('should return null on nested element when not found', () => {
        const { find } = render(_jsx(_Fragment, { children: _jsx(ButtonRow, { children: _jsx(Button, { variant: "secondary", children: "Button 1" }) }) }));
        const buttonRow = find(ButtonRow);
        const text = buttonRow.maybeFind(Text);
        expect(text).toBeNull();
    });
});
