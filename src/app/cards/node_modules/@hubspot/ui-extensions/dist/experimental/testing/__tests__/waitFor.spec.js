import { jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
import { useEffect, useState } from 'react';
import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';
import { Button } from '../../../index';
import { render } from '../index';
import { WaitForTimeoutError } from '../internal/errors';
describe('waitFor()', () => {
    beforeEach(() => {
        // tell vitest we use mocked time
        vi.useFakeTimers();
    });
    afterEach(() => {
        // restoring date after each test run
        vi.useRealTimers();
    });
    it('should allow for waiting for asynchronous updates', async () => {
        function AsyncCounter() {
            const [count, setCount] = useState(0);
            useEffect(() => {
                setTimeout(() => {
                    setCount((currentCount) => currentCount + 1);
                }, 10);
            }, []);
            return _jsxs(Button, { variant: "primary", children: ["Count: ", count] });
        }
        const { find, waitFor } = render(_jsx(AsyncCounter, {}));
        expect(find(Button).text).toEqual('Count: 0');
        const waitForPromise = waitFor(() => {
            expect(find(Button).text).toEqual('Count: 1');
        });
        vi.advanceTimersByTimeAsync(100);
        await waitForPromise;
    });
    it('should allow for waiting for asynchronous updates with a timeout', async () => {
        vi.useFakeTimers();
        function AsyncCounter() {
            const [count, setCount] = useState(0);
            useEffect(() => {
                setTimeout(() => {
                    setCount((currentCount) => currentCount + 1);
                }, 5000);
            }, []);
            return _jsxs(Button, { variant: "primary", children: ["Count: ", count] });
        }
        const { find, waitFor } = render(_jsx(AsyncCounter, {}));
        expect(find(Button).text).toEqual('Count: 0');
        const waitForPromise = waitFor(() => {
            expect(find(Button).text).toEqual('Count: 1');
        });
        // The default timeout is 1000ms, so we advance the timers by 5000ms to ensure the timeout is triggered.
        vi.advanceTimersByTimeAsync(5000);
        await expect(waitForPromise).rejects.toThrow(WaitForTimeoutError);
    });
    // TODO: Add a test for waiting for asynchronous updates with a custom timeout
});
