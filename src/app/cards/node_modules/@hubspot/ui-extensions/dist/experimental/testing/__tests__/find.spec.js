import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { describe, expect, it } from 'vitest';
import { Alert, Button, ButtonRow, Text } from '../../../index';
import { render } from '../index';
import { ComponentNotFoundError, FindInvalidComponentError, } from '../internal/errors';
describe('find()', () => {
    it('should allow assertions against initial rendered output', () => {
        const buttonLabel = 'Click me!';
        const { find } = render(_jsxs(_Fragment, { children: [_jsx(ButtonRow, { children: _jsx(Button, { variant: "primary", children: buttonLabel }) }), _jsx(Alert, { title: "My Alert" })] }));
        const button = find(Button);
        expect(button.props).toEqual({ variant: 'primary' });
        expect(button.text).toEqual(buttonLabel);
    });
    it('should allow finding a matching component based on props object', () => {
        const { find } = render(_jsxs(_Fragment, { children: [_jsxs(ButtonRow, { children: [_jsx(Button, { variant: "secondary", children: "Button 1" }), _jsx(Button, { variant: "primary", children: "Button 2" })] }), _jsx(Alert, { title: "My Alert" })] }));
        const primaryButton = find(Button, { variant: 'primary' });
        expect(primaryButton.props).toMatchObject({ variant: 'primary' });
    });
    it('should allow finding a matching component based on a predicate function', () => {
        const { find } = render(_jsxs(_Fragment, { children: [_jsxs(ButtonRow, { children: [_jsx(Button, { variant: "secondary", children: "Button 1" }), _jsx(Button, { variant: "primary", children: "Button 2" })] }), _jsx(Alert, { title: "My Alert" })] }));
        const primaryButton = find(Button, (node) => node.props.variant === 'primary');
        expect(primaryButton.props).toMatchObject({ variant: 'primary' });
    });
    it('should throw an error when no match is found', () => {
        const { find } = render(_jsx(Alert, { title: "My Alert" }));
        expect(() => find(Text)).toThrow(ComponentNotFoundError);
    });
    it('should throw an error when target component is invalid', () => {
        const { find } = render(_jsx(Alert, { title: "My Alert" }));
        const MyFakeComponent = () => { };
        expect(() => find(MyFakeComponent)).toThrow(FindInvalidComponentError);
    });
});
