import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { describe, expect, it } from 'vitest';
import { Alert, Button, ButtonRow, List, Text } from '../../../index';
import { render } from '../index';
function MyComponent() {
    return (_jsxs(_Fragment, { children: [_jsx(ButtonRow, { children: _jsx(Button, { variant: "primary", overlay: _jsx(List, { children: _jsx(Text, { children: "Item 1" }) }), children: "Click me!" }) }), _jsx(Alert, { title: "My Alert" })] }));
}
describe('debugging', () => {
    describe('toString', () => {
        it('should allow the root node to be converted to a string', () => {
            const { getRootNode } = render(_jsx(MyComponent, {}));
            expect(getRootNode().toString()).toMatchSnapshot();
        });
        it('should allow a component node to be converted to a string', () => {
            const { find } = render(_jsx(MyComponent, {}));
            expect(find(Button).toString()).toMatchSnapshot();
        });
    });
    describe('debugLog()', () => {
        let consoleLogSpy;
        beforeEach(() => {
            consoleLogSpy = vi.spyOn(console, 'log').mockImplementation(() => { });
        });
        afterEach(() => {
            consoleLogSpy.mockRestore();
        });
        it('should allow debug logging the root node', () => {
            const { debugLog } = render(_jsx(MyComponent, {}));
            debugLog('MY COMPONENT TREE');
            expect(consoleLogSpy.mock.calls).toMatchSnapshot();
        });
        it('should allow debug logging a component element node', () => {
            const { find } = render(_jsx(MyComponent, {}));
            find(Button).debugLog('MY BUTTON');
            expect(consoleLogSpy.mock.calls).toMatchSnapshot();
        });
        it('should allow debug logging a component element node without a label', () => {
            const { find } = render(_jsx(MyComponent, {}));
            find(Button).debugLog();
            expect(consoleLogSpy.mock.calls).toMatchSnapshot();
        });
    });
});
