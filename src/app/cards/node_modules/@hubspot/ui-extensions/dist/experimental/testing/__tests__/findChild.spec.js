import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { describe, expect, it } from 'vitest';
import { Alert, Button, ButtonRow } from '../../../index';
import { render } from '../index';
import { ComponentNotFoundError, FindInvalidComponentError, } from '../internal/errors';
describe('findChild()', () => {
    it('should allow finding a child from the root node', () => {
        const buttonLabel = '';
        const { findChild } = render(_jsxs(_Fragment, { children: [_jsx(ButtonRow, { children: _jsx(Button, { variant: "primary", children: buttonLabel }) }), _jsx(Alert, { title: "My Alert" })] }));
        expect(findChild(ButtonRow)).toBeDefined();
    });
    it('should allow finding a child from a nested component', () => {
        const buttonLabel = '';
        const { find } = render(_jsxs(_Fragment, { children: [_jsx(ButtonRow, { children: _jsx(Button, { variant: "primary", children: buttonLabel }) }), _jsx(Alert, { title: "My Alert" })] }));
        const buttonRow = find(ButtonRow);
        expect(buttonRow.findChild(Button).props).toEqual({ variant: 'primary' });
    });
    it('should throw an error when no match is found', () => {
        const { find } = render(_jsx(ButtonRow, { children: _jsx(Button, { variant: "primary", children: "Click me!" }) }));
        const buttonRow = find(ButtonRow);
        expect(() => buttonRow.findChild(Alert)).toThrow(ComponentNotFoundError);
    });
    it('should throw an error when target component is invalid', () => {
        const { find } = render(_jsx(ButtonRow, { children: _jsx(Button, { variant: "primary", children: "Click me!" }) }));
        const MyFakeComponent = () => { };
        const buttonRow = find(ButtonRow);
        expect(() => buttonRow.findChild(MyFakeComponent)).toThrow(FindInvalidComponentError);
    });
});
