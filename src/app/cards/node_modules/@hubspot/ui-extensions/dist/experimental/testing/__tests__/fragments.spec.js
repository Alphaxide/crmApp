import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { describe, expect, it } from 'vitest';
import { Alert, Button, ButtonRow, List, Text } from '../../../index';
import { render } from '../index';
import { InvalidFragmentPropArrayError } from '../internal/errors';
describe('fragments', () => {
    it('should allow assertions against components with fragment props', () => {
        const buttonLabel = 'Click me!';
        const { find } = render(_jsxs(_Fragment, { children: [_jsx(ButtonRow, { children: _jsx(Button, { variant: "primary", overlay: _jsx(List, { children: _jsx(Text, { children: "Item 1" }) }), children: buttonLabel }) }), _jsx(Alert, { title: "My Alert" })] }));
        expect(find(Text).text).toEqual('Item 1');
        expect(find(Button).text).toEqual(buttonLabel);
    });
    it('should handle undefined fragment props', () => {
        const buttonLabel = 'Click me!';
        const { find } = render(_jsxs(_Fragment, { children: [_jsx(ButtonRow, { children: _jsx(Button, { variant: "primary", children: buttonLabel }) }), _jsx(Alert, { title: "My Alert" })] }));
        const button = find(Button);
        const { props: buttonProps } = button;
        expect(buttonProps.overlay).toBeUndefined();
        expect(find(Alert).props).toEqual({ title: 'My Alert' });
    });
    it('should handle null fragment props', () => {
        const buttonLabel = 'Click me!';
        const { find } = render(_jsxs(_Fragment, { children: [_jsx(ButtonRow, { children: _jsx(Button, { variant: "primary", overlay: null, children: buttonLabel }) }), _jsx(Alert, { title: "My Alert" })] }));
        const button = find(Button);
        const { props: buttonProps } = button;
        expect(buttonProps.overlay?.children).toHaveLength(0);
        expect(find(Alert).props).toEqual({ title: 'My Alert' });
    });
    it('should throw an error if an array fragment prop is passed', () => {
        const buttonLabel = 'Click me!';
        const arrayProp = [1, 2, 3];
        expect(() => {
            render(_jsx(Button, { variant: "primary", overlay: arrayProp, children: buttonLabel }));
        }).toThrow(InvalidFragmentPropArrayError);
    });
    it('should handle string fragment props', () => {
        const buttonLabel = 'Click me!';
        const { find } = render(_jsxs(_Fragment, { children: [_jsx(ButtonRow, { children: _jsx(Button, { variant: "primary", overlay: "My Overlay", children: buttonLabel }) }), _jsx(Alert, { title: "My Alert" })] }));
        const button = find(Button);
        expect(button.props.overlay?.text).toEqual('My Overlay');
        expect(find(Alert).props).toEqual({ title: 'My Alert' });
    });
    it('should handle fragment props that are a JSX fragment', () => {
        const buttonLabel = 'Click me!';
        const { find } = render(_jsxs(_Fragment, { children: [_jsx(ButtonRow, { children: _jsx(Button, { variant: "primary", overlay: _jsx(_Fragment, { children: "My Overlay" }), children: buttonLabel }) }), _jsx(Alert, { title: "My Alert" })] }));
        const button = find(Button);
        expect(button.props.overlay?.text).toEqual('My Overlay');
        expect(find(Alert).props).toEqual({ title: 'My Alert' });
    });
    it('should allow assertions against fragments rendered by a custom component', () => {
        const buttonLabel = 'Click me!';
        function MyOverlay() {
            return (_jsx(List, { children: _jsx(Text, { children: "Item 1" }) }));
        }
        const { find } = render(_jsxs(_Fragment, { children: [_jsx(ButtonRow, { children: _jsx(Button, { variant: "primary", overlay: _jsx(MyOverlay, {}), children: buttonLabel }) }), _jsx(Alert, { title: "My Alert" })] }));
        expect(find(Text).text).toEqual('Item 1');
        expect(find(Button).text).toEqual(buttonLabel);
    });
});
