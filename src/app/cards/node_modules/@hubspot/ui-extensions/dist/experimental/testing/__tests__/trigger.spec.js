import { jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
import { useState } from 'react';
import { describe, expect, it } from 'vitest';
import { Button } from '../../../index';
import { render } from '../index';
import { InvalidEventFunctionError, MissingEventFunctionError, } from '../internal/errors';
describe('trigger()', () => {
    it('should allow events to be triggered', () => {
        function Counter() {
            const [count, setCount] = useState(0);
            const handleClick = () => {
                setCount(count + 1);
            };
            return (_jsxs(Button, { variant: "primary", onClick: handleClick, children: ["Clicked ", count, " times"] }));
        }
        const { find } = render(_jsx(Counter, {}));
        expect(find(Button).text).toEqual('Clicked 0 times');
        find(Button).trigger('onClick');
        expect(find(Button).text).toEqual('Clicked 1 times');
    });
    it('should throw the correct error when a triggered event function is null', () => {
        function Counter() {
            return _jsx(Button, { variant: "primary", children: "Click me!" });
        }
        const { find } = render(_jsx(Counter, {}));
        expect(() => {
            find(Button).trigger('onClick');
        }).toThrow(MissingEventFunctionError);
    });
    it('should throw the correct error when a triggered event function is not a function but also not null', () => {
        function Counter() {
            const handleClick = {};
            return (_jsx(Button, { variant: "primary", onClick: handleClick, children: "Click me!" }));
        }
        const { find } = render(_jsx(Counter, {}));
        expect(() => {
            find(Button).trigger('onClick');
        }).toThrow(InvalidEventFunctionError);
    });
});
